/*
 * generated by Xtext 2.23.0
 */
package org.xtext.component.dependency.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.component.dependency.ide.contentassist.antlr.internal.InternalDependencyParser;
import org.xtext.component.dependency.services.DependencyGrammarAccess;

public class DependencyParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DependencyGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DependencyGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getComponentDependencyObjectsAccess().getGroup(), "rule__ComponentDependencyObjects__Group__0");
			builder.put(grammarAccess.getUserNameAccess().getGroup(), "rule__UserName__Group__0");
			builder.put(grammarAccess.getUserImportAccess().getGroup(), "rule__UserImport__Group__0");
			builder.put(grammarAccess.getAtAccess().getGroup(), "rule__At__Group__0");
			builder.put(grammarAccess.getComponentDependencyObjectsAccess().getUsernameAssignment_0(), "rule__ComponentDependencyObjects__UsernameAssignment_0");
			builder.put(grammarAccess.getComponentDependencyObjectsAccess().getUserimportAssignment_1(), "rule__ComponentDependencyObjects__UserimportAssignment_1");
			builder.put(grammarAccess.getComponentDependencyObjectsAccess().getAtAssignment_2(), "rule__ComponentDependencyObjects__AtAssignment_2");
			builder.put(grammarAccess.getUserNameAccess().getNameAssignment_2(), "rule__UserName__NameAssignment_2");
			builder.put(grammarAccess.getUserImportAccess().getEnvironmentAssignment_1(), "rule__UserImport__EnvironmentAssignment_1");
			builder.put(grammarAccess.getUserImportAccess().getBoxpathAssignment_3(), "rule__UserImport__BoxpathAssignment_3");
			builder.put(grammarAccess.getAtAccess().getNameAssignment_2(), "rule__At__NameAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DependencyGrammarAccess grammarAccess;

	@Override
	protected InternalDependencyParser createParser() {
		InternalDependencyParser result = new InternalDependencyParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DependencyGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DependencyGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
