/*
 * generated by Xtext 2.23.0
 */
grammar InternalDependency;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.component.dependency.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.component.dependency.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.component.dependency.services.DependencyGrammarAccess;

}
@parser::members {
	private DependencyGrammarAccess grammarAccess;

	public void setGrammarAccess(DependencyGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleComponentDependencyObjects
entryRuleComponentDependencyObjects
:
{ before(grammarAccess.getComponentDependencyObjectsRule()); }
	 ruleComponentDependencyObjects
{ after(grammarAccess.getComponentDependencyObjectsRule()); } 
	 EOF 
;

// Rule ComponentDependencyObjects
ruleComponentDependencyObjects 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComponentDependencyObjectsAccess().getGroup()); }
		(rule__ComponentDependencyObjects__Group__0)
		{ after(grammarAccess.getComponentDependencyObjectsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUserName
entryRuleUserName
:
{ before(grammarAccess.getUserNameRule()); }
	 ruleUserName
{ after(grammarAccess.getUserNameRule()); } 
	 EOF 
;

// Rule UserName
ruleUserName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUserNameAccess().getGroup()); }
		(rule__UserName__Group__0)
		{ after(grammarAccess.getUserNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUserImport
entryRuleUserImport
:
{ before(grammarAccess.getUserImportRule()); }
	 ruleUserImport
{ after(grammarAccess.getUserImportRule()); } 
	 EOF 
;

// Rule UserImport
ruleUserImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUserImportAccess().getGroup()); }
		(rule__UserImport__Group__0)
		{ after(grammarAccess.getUserImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAt
entryRuleAt
:
{ before(grammarAccess.getAtRule()); }
	 ruleAt
{ after(grammarAccess.getAtRule()); } 
	 EOF 
;

// Rule At
ruleAt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtAccess().getGroup()); }
		(rule__At__Group__0)
		{ after(grammarAccess.getAtAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDependencyObjects__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComponentDependencyObjects__Group__0__Impl
	rule__ComponentDependencyObjects__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDependencyObjects__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentDependencyObjectsAccess().getUsernameAssignment_0()); }
	(rule__ComponentDependencyObjects__UsernameAssignment_0)
	{ after(grammarAccess.getComponentDependencyObjectsAccess().getUsernameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDependencyObjects__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComponentDependencyObjects__Group__1__Impl
	rule__ComponentDependencyObjects__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDependencyObjects__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentDependencyObjectsAccess().getUserimportAssignment_1()); }
	(rule__ComponentDependencyObjects__UserimportAssignment_1)
	{ after(grammarAccess.getComponentDependencyObjectsAccess().getUserimportAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDependencyObjects__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComponentDependencyObjects__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDependencyObjects__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentDependencyObjectsAccess().getAtAssignment_2()); }
	(rule__ComponentDependencyObjects__AtAssignment_2)
	{ after(grammarAccess.getComponentDependencyObjectsAccess().getAtAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UserName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UserName__Group__0__Impl
	rule__UserName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UserName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUserNameAccess().getUserNameKeyword_0()); }
	'UserName'
	{ after(grammarAccess.getUserNameAccess().getUserNameKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UserName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UserName__Group__1__Impl
	rule__UserName__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UserName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUserNameAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getUserNameAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UserName__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UserName__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UserName__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUserNameAccess().getNameAssignment_2()); }
	(rule__UserName__NameAssignment_2)
	{ after(grammarAccess.getUserNameAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UserImport__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UserImport__Group__0__Impl
	rule__UserImport__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UserImport__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUserImportAccess().getImportKeyword_0()); }
	'import'
	{ after(grammarAccess.getUserImportAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UserImport__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UserImport__Group__1__Impl
	rule__UserImport__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UserImport__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUserImportAccess().getEnvironmentAssignment_1()); }
	(rule__UserImport__EnvironmentAssignment_1)
	{ after(grammarAccess.getUserImportAccess().getEnvironmentAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UserImport__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UserImport__Group__2__Impl
	rule__UserImport__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UserImport__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUserImportAccess().getFromKeyword_2()); }
	'from'
	{ after(grammarAccess.getUserImportAccess().getFromKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UserImport__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UserImport__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UserImport__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUserImportAccess().getBoxpathAssignment_3()); }
	(rule__UserImport__BoxpathAssignment_3)
	{ after(grammarAccess.getUserImportAccess().getBoxpathAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__At__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__At__Group__0__Impl
	rule__At__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__At__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtAccess().getSaveKeyword_0()); }
	'Save'
	{ after(grammarAccess.getAtAccess().getSaveKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__At__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__At__Group__1__Impl
	rule__At__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__At__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtAccess().getCommercialAtKeyword_1()); }
	'@'
	{ after(grammarAccess.getAtAccess().getCommercialAtKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__At__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__At__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__At__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtAccess().getNameAssignment_2()); }
	(rule__At__NameAssignment_2)
	{ after(grammarAccess.getAtAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentDependencyObjects__UsernameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponentDependencyObjectsAccess().getUsernameUserNameParserRuleCall_0_0()); }
		ruleUserName
		{ after(grammarAccess.getComponentDependencyObjectsAccess().getUsernameUserNameParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDependencyObjects__UserimportAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponentDependencyObjectsAccess().getUserimportUserImportParserRuleCall_1_0()); }
		ruleUserImport
		{ after(grammarAccess.getComponentDependencyObjectsAccess().getUserimportUserImportParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDependencyObjects__AtAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponentDependencyObjectsAccess().getAtAtParserRuleCall_2_0()); }
		ruleAt
		{ after(grammarAccess.getComponentDependencyObjectsAccess().getAtAtParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UserName__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUserNameAccess().getNameSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getUserNameAccess().getNameSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UserImport__EnvironmentAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUserImportAccess().getEnvironmentSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getUserImportAccess().getEnvironmentSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UserImport__BoxpathAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUserImportAccess().getBoxpathSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getUserImportAccess().getBoxpathSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__At__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtAccess().getNameSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getAtAccess().getNameSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
