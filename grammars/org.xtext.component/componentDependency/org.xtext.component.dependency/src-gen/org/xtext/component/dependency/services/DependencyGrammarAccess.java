/*
 * generated by Xtext 2.21.0
 */
package org.xtext.component.dependency.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DependencyGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ComponentDependencyObjectsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.component.dependency.Dependency.ComponentDependencyObjects");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUsernameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUsernameUserNameParserRuleCall_0_0 = (RuleCall)cUsernameAssignment_0.eContents().get(0);
		private final Assignment cUserimportAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUserimportUserImportParserRuleCall_1_0 = (RuleCall)cUserimportAssignment_1.eContents().get(0);
		private final Assignment cAtAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAtAtParserRuleCall_2_0 = (RuleCall)cAtAssignment_2.eContents().get(0);
		
		//ComponentDependencyObjects:
		//	username=UserName
		//	userimport=UserImport
		//	at=At;
		@Override public ParserRule getRule() { return rule; }
		
		//username=UserName userimport=UserImport at=At
		public Group getGroup() { return cGroup; }
		
		//username=UserName
		public Assignment getUsernameAssignment_0() { return cUsernameAssignment_0; }
		
		//UserName
		public RuleCall getUsernameUserNameParserRuleCall_0_0() { return cUsernameUserNameParserRuleCall_0_0; }
		
		//userimport=UserImport
		public Assignment getUserimportAssignment_1() { return cUserimportAssignment_1; }
		
		//UserImport
		public RuleCall getUserimportUserImportParserRuleCall_1_0() { return cUserimportUserImportParserRuleCall_1_0; }
		
		//at=At
		public Assignment getAtAssignment_2() { return cAtAssignment_2; }
		
		//At
		public RuleCall getAtAtParserRuleCall_2_0() { return cAtAtParserRuleCall_2_0; }
	}
	public class UserNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.component.dependency.Dependency.UserName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUserNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//UserName:
		//	'UserName' ':' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'UserName' ':' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'UserName'
		public Keyword getUserNameKeyword_0() { return cUserNameKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
	}
	public class UserImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.component.dependency.Dependency.UserImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEnvironmentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnvironmentSTRINGTerminalRuleCall_1_0 = (RuleCall)cEnvironmentAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBoxpathAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBoxpathSTRINGTerminalRuleCall_3_0 = (RuleCall)cBoxpathAssignment_3.eContents().get(0);
		
		//UserImport:
		//	'import' environment=STRING 'from' boxpath=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' environment=STRING 'from' boxpath=STRING
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//environment=STRING
		public Assignment getEnvironmentAssignment_1() { return cEnvironmentAssignment_1; }
		
		//STRING
		public RuleCall getEnvironmentSTRINGTerminalRuleCall_1_0() { return cEnvironmentSTRINGTerminalRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//boxpath=STRING
		public Assignment getBoxpathAssignment_3() { return cBoxpathAssignment_3; }
		
		//STRING
		public RuleCall getBoxpathSTRINGTerminalRuleCall_3_0() { return cBoxpathSTRINGTerminalRuleCall_3_0; }
	}
	public class AtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.component.dependency.Dependency.At");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSaveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//At:
		//	'Save' '@' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Save' '@' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'Save'
		public Keyword getSaveKeyword_0() { return cSaveKeyword_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
	}
	
	
	private final ComponentDependencyObjectsElements pComponentDependencyObjects;
	private final UserNameElements pUserName;
	private final UserImportElements pUserImport;
	private final AtElements pAt;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DependencyGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pComponentDependencyObjects = new ComponentDependencyObjectsElements();
		this.pUserName = new UserNameElements();
		this.pUserImport = new UserImportElements();
		this.pAt = new AtElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.component.dependency.Dependency".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ComponentDependencyObjects:
	//	username=UserName
	//	userimport=UserImport
	//	at=At;
	public ComponentDependencyObjectsElements getComponentDependencyObjectsAccess() {
		return pComponentDependencyObjects;
	}
	
	public ParserRule getComponentDependencyObjectsRule() {
		return getComponentDependencyObjectsAccess().getRule();
	}
	
	//UserName:
	//	'UserName' ':' name=STRING;
	public UserNameElements getUserNameAccess() {
		return pUserName;
	}
	
	public ParserRule getUserNameRule() {
		return getUserNameAccess().getRule();
	}
	
	//UserImport:
	//	'import' environment=STRING 'from' boxpath=STRING;
	public UserImportElements getUserImportAccess() {
		return pUserImport;
	}
	
	public ParserRule getUserImportRule() {
		return getUserImportAccess().getRule();
	}
	
	//At:
	//	'Save' '@' name=STRING;
	public AtElements getAtAccess() {
		return pAt;
	}
	
	public ParserRule getAtRule() {
		return getAtAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
