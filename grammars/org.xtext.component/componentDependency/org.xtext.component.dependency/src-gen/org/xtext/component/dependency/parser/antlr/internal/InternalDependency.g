/*
 * generated by Xtext 2.23.0
 */
grammar InternalDependency;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.component.dependency.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.component.dependency.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.component.dependency.services.DependencyGrammarAccess;

}

@parser::members {

 	private DependencyGrammarAccess grammarAccess;

    public InternalDependencyParser(TokenStream input, DependencyGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ComponentDependencyObjects";
   	}

   	@Override
   	protected DependencyGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleComponentDependencyObjects
entryRuleComponentDependencyObjects returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComponentDependencyObjectsRule()); }
	iv_ruleComponentDependencyObjects=ruleComponentDependencyObjects
	{ $current=$iv_ruleComponentDependencyObjects.current; }
	EOF;

// Rule ComponentDependencyObjects
ruleComponentDependencyObjects returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getComponentDependencyObjectsAccess().getUsernameUserNameParserRuleCall_0_0());
				}
				lv_username_0_0=ruleUserName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComponentDependencyObjectsRule());
					}
					set(
						$current,
						"username",
						lv_username_0_0,
						"org.xtext.component.dependency.Dependency.UserName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComponentDependencyObjectsAccess().getUserimportUserImportParserRuleCall_1_0());
				}
				lv_userimport_1_0=ruleUserImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComponentDependencyObjectsRule());
					}
					set(
						$current,
						"userimport",
						lv_userimport_1_0,
						"org.xtext.component.dependency.Dependency.UserImport");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComponentDependencyObjectsAccess().getAtAtParserRuleCall_2_0());
				}
				lv_at_2_0=ruleAt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComponentDependencyObjectsRule());
					}
					set(
						$current,
						"at",
						lv_at_2_0,
						"org.xtext.component.dependency.Dependency.At");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleUserName
entryRuleUserName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUserNameRule()); }
	iv_ruleUserName=ruleUserName
	{ $current=$iv_ruleUserName.current; }
	EOF;

// Rule UserName
ruleUserName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='UserName'
		{
			newLeafNode(otherlv_0, grammarAccess.getUserNameAccess().getUserNameKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getUserNameAccess().getColonKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_STRING
				{
					newLeafNode(lv_name_2_0, grammarAccess.getUserNameAccess().getNameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUserNameRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleUserImport
entryRuleUserImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUserImportRule()); }
	iv_ruleUserImport=ruleUserImport
	{ $current=$iv_ruleUserImport.current; }
	EOF;

// Rule UserImport
ruleUserImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getUserImportAccess().getImportKeyword_0());
		}
		(
			(
				lv_environment_1_0=RULE_STRING
				{
					newLeafNode(lv_environment_1_0, grammarAccess.getUserImportAccess().getEnvironmentSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUserImportRule());
					}
					setWithLastConsumed(
						$current,
						"environment",
						lv_environment_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='from'
		{
			newLeafNode(otherlv_2, grammarAccess.getUserImportAccess().getFromKeyword_2());
		}
		(
			(
				lv_boxpath_3_0=RULE_STRING
				{
					newLeafNode(lv_boxpath_3_0, grammarAccess.getUserImportAccess().getBoxpathSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUserImportRule());
					}
					setWithLastConsumed(
						$current,
						"boxpath",
						lv_boxpath_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleAt
entryRuleAt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtRule()); }
	iv_ruleAt=ruleAt
	{ $current=$iv_ruleAt.current; }
	EOF;

// Rule At
ruleAt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Save'
		{
			newLeafNode(otherlv_0, grammarAccess.getAtAccess().getSaveKeyword_0());
		}
		otherlv_1='@'
		{
			newLeafNode(otherlv_1, grammarAccess.getAtAccess().getCommercialAtKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_STRING
				{
					newLeafNode(lv_name_2_0, grammarAccess.getAtAccess().getNameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
