/*
 * generated by Xtext 2.23.0
 */
package org.xtext.system.dependency.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.system.dependency.dependency.At;
import org.xtext.system.dependency.dependency.Dependency;
import org.xtext.system.dependency.dependency.DependencyPackage;
import org.xtext.system.dependency.dependency.GUI;
import org.xtext.system.dependency.dependency.SystemDependencyObjects;
import org.xtext.system.dependency.dependency.UserImport;
import org.xtext.system.dependency.dependency.UserName;
import org.xtext.system.dependency.services.DependencyGrammarAccess;

@SuppressWarnings("all")
public class DependencySemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DependencyGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DependencyPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DependencyPackage.AT:
				sequence_At(context, (At) semanticObject); 
				return; 
			case DependencyPackage.DEPENDENCY:
				sequence_Dependency(context, (Dependency) semanticObject); 
				return; 
			case DependencyPackage.GUI:
				sequence_GUI(context, (GUI) semanticObject); 
				return; 
			case DependencyPackage.SYSTEM_DEPENDENCY_OBJECTS:
				sequence_SystemDependencyObjects(context, (SystemDependencyObjects) semanticObject); 
				return; 
			case DependencyPackage.USER_IMPORT:
				sequence_UserImport(context, (UserImport) semanticObject); 
				return; 
			case DependencyPackage.USER_NAME:
				sequence_UserName(context, (UserName) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     At returns At
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_At(ISerializationContext context, At semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DependencyPackage.Literals.AT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DependencyPackage.Literals.AT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Dependency returns Dependency
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         fn=STRING 
	 *         fp=STRING 
	 *         o=STRING 
	 *         tn=STRING 
	 *         tp=STRING
	 *     )
	 */
	protected void sequence_Dependency(ISerializationContext context, Dependency semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DependencyPackage.Literals.DEPENDENCY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DependencyPackage.Literals.DEPENDENCY__NAME));
			if (transientValues.isValueTransient(semanticObject, DependencyPackage.Literals.DEPENDENCY__FN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DependencyPackage.Literals.DEPENDENCY__FN));
			if (transientValues.isValueTransient(semanticObject, DependencyPackage.Literals.DEPENDENCY__FP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DependencyPackage.Literals.DEPENDENCY__FP));
			if (transientValues.isValueTransient(semanticObject, DependencyPackage.Literals.DEPENDENCY__O) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DependencyPackage.Literals.DEPENDENCY__O));
			if (transientValues.isValueTransient(semanticObject, DependencyPackage.Literals.DEPENDENCY__TN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DependencyPackage.Literals.DEPENDENCY__TN));
			if (transientValues.isValueTransient(semanticObject, DependencyPackage.Literals.DEPENDENCY__TP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DependencyPackage.Literals.DEPENDENCY__TP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDependencyAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDependencyAccess().getFnSTRINGTerminalRuleCall_2_0(), semanticObject.getFn());
		feeder.accept(grammarAccess.getDependencyAccess().getFpSTRINGTerminalRuleCall_4_0(), semanticObject.getFp());
		feeder.accept(grammarAccess.getDependencyAccess().getOSTRINGTerminalRuleCall_6_0(), semanticObject.getO());
		feeder.accept(grammarAccess.getDependencyAccess().getTnSTRINGTerminalRuleCall_8_0(), semanticObject.getTn());
		feeder.accept(grammarAccess.getDependencyAccess().getTpSTRINGTerminalRuleCall_10_0(), semanticObject.getTp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GUI returns GUI
	 *
	 * Constraint:
	 *     (name=STRING x=INT y=INT)
	 */
	protected void sequence_GUI(ISerializationContext context, GUI semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DependencyPackage.Literals.GUI__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DependencyPackage.Literals.GUI__NAME));
			if (transientValues.isValueTransient(semanticObject, DependencyPackage.Literals.GUI__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DependencyPackage.Literals.GUI__X));
			if (transientValues.isValueTransient(semanticObject, DependencyPackage.Literals.GUI__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DependencyPackage.Literals.GUI__Y));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGUIAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getGUIAccess().getXINTTerminalRuleCall_3_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getGUIAccess().getYINTTerminalRuleCall_5_0(), semanticObject.getY());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SystemDependencyObjects returns SystemDependencyObjects
	 *
	 * Constraint:
	 *     (username=UserName userimport=UserImport at=At dependencies+=Dependency* guis+=GUI*)
	 */
	protected void sequence_SystemDependencyObjects(ISerializationContext context, SystemDependencyObjects semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UserImport returns UserImport
	 *
	 * Constraint:
	 *     (environment=STRING boxpath=STRING)
	 */
	protected void sequence_UserImport(ISerializationContext context, UserImport semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DependencyPackage.Literals.USER_IMPORT__ENVIRONMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DependencyPackage.Literals.USER_IMPORT__ENVIRONMENT));
			if (transientValues.isValueTransient(semanticObject, DependencyPackage.Literals.USER_IMPORT__BOXPATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DependencyPackage.Literals.USER_IMPORT__BOXPATH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUserImportAccess().getEnvironmentSTRINGTerminalRuleCall_1_0(), semanticObject.getEnvironment());
		feeder.accept(grammarAccess.getUserImportAccess().getBoxpathSTRINGTerminalRuleCall_3_0(), semanticObject.getBoxpath());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     UserName returns UserName
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_UserName(ISerializationContext context, UserName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DependencyPackage.Literals.USER_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DependencyPackage.Literals.USER_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUserNameAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
