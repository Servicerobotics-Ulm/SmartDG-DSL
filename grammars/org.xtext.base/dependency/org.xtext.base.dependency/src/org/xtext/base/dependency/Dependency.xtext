//================================================================
//
//  Copyright (c) 2020 Technische Hochschule Ulm, Servicerobotics Ulm, Germany
//
//        Servicerobotik Ulm 
//        Christian Schlegel
//        Ulm University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm
//        Germany
//
//	  http://www.servicerobotik-ulm.de/
//
//  This file is part of the SmartDG Dependency Graph extension for SmartMDSD Toolchain.
//
//  Contributors:
//	Vineet Nagrath	   :	Vineet.Nagrath@thu.de
//	Alex Lotz	   	   :	Alex.Lotz@thu.de
//	Christian Schlegel :	Christian.Schlegel@thu.de
//
//  Licence:
//
//  BSD 3-Clause License
//  
//  Copyright (c) 2019, Servicerobotics Ulm
//  All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//  
//  * Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//  
//  * Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//  
//  * Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived from
//    this software without specific prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
//  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
//  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
//  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
//  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//  https://opensource.org/licenses/BSD-3-Clause
//
//================================================================

grammar org.xtext.base.dependency.Dependency with org.eclipse.xtext.common.Terminals

generate dependency "http://www.xtext.org/base/dependency/Dependency"

Model:
	(username+=UserName)?
	(userimport+=UserImport)?
	(new+=New)*
	(environments+=Environment)*
	(systemProjects+=SystemProject)*
	(componentDevelopments+=ComponentDevelopment)*;

	// New ++
New:
	name="new"
	(object+=DependencyObject)?
	(component+=DependencyComponent)?
	(connector+=DependencyConnectors)?
	location=At;

At:
	'@' name=STRING;

UserName:
	'UserName' ':' name=STRING;

UserImport:
	'import' environment=STRING 'from' boxpath=STRING;

	// Environment ++
Environment:
	'Environment' name=ID ('Wiki' ':' wiki=STRING)?
	'{'
	(objects+=DependencyObject)*
	(components+=DependencyComponent)*
	(connectors+=DependencyConnectors)*
	(location+=At)+
	'}';

DependencyObject:
	'Object' name=STRING ('isMulti' ':' isMulti=STRING)? ('Wiki' ':' wiki=STRING)?;

DependencyComponent:
	'Component' name=STRING
	'{'
	('InputPorts' ':' inputPorts+=DependencyPort (',' inputPorts+=DependencyPort)*)?
	('OutputPorts' ':' outputPorts+=DependencyPort (',' outputPorts+=DependencyPort)*)?
	('Wiki' ':' wiki=STRING)?
	'}';

DependencyPort:
	name=STRING
	'[' objinstances+=STRING (',' objinstances+=STRING)* ']';

DependencyConnectors:
	'Connector' name=STRING
	'[' objinstances+=STRING (',' objinstances+=STRING)* ']';

	// System Project ++
SystemProject:
	'SystemProject' name=ID ('Wiki' ':' wiki=STRING)?
	'{'
	'import' environment=STRING 'from' boxpath=STRING
	(cims+=CIM)*
	(dependencies+=Dependency)*
	(gui+=GUI)*
	(location+=BoxLocation)+
	'}';

Dependency:
	'Dependency' name=STRING
	fn=STRING '.' fp=STRING
	'--' o=STRING '-->'
	tn=STRING '.' tp=STRING
	('Wiki' ':' wiki=STRING)?;

GUI:
	'GUI' name=STRING '(' x=INT ',' y=INT ')'
	('Wiki' ':' wiki=STRING)?;

CIM:
	'CIM' name=STRING 'is' source=STRING;

BoxLocation:
	'BoxLocation' name=STRING
	('Import' ':' importflag=STRING)?
	('Build' ':' buildflag=STRING)?
	('Launch' ':' launchflag=STRING)?
	('Detach' ':' detachflag=STRING)?;

	// Component Development ++
ComponentDevelopment:
	'ComponentDevelopment' name=ID ('Wiki' ':' wiki=STRING)?
	'{'
	'import' environment=STRING 'from' boxpath=STRING
	'Component' component=STRING
	(location+=BoxLocation)+
	'}';