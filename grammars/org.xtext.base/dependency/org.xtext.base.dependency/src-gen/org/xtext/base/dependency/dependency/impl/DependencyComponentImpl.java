/**
 * generated by Xtext 2.23.0
 */
package org.xtext.base.dependency.dependency.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.base.dependency.dependency.DependencyComponent;
import org.xtext.base.dependency.dependency.DependencyPackage;
import org.xtext.base.dependency.dependency.DependencyPort;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Component</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.base.dependency.dependency.impl.DependencyComponentImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.base.dependency.dependency.impl.DependencyComponentImpl#getInputPorts <em>Input Ports</em>}</li>
 *   <li>{@link org.xtext.base.dependency.dependency.impl.DependencyComponentImpl#getOutputPorts <em>Output Ports</em>}</li>
 *   <li>{@link org.xtext.base.dependency.dependency.impl.DependencyComponentImpl#getWiki <em>Wiki</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DependencyComponentImpl extends MinimalEObjectImpl.Container implements DependencyComponent
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getInputPorts() <em>Input Ports</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInputPorts()
   * @generated
   * @ordered
   */
  protected EList<DependencyPort> inputPorts;

  /**
   * The cached value of the '{@link #getOutputPorts() <em>Output Ports</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutputPorts()
   * @generated
   * @ordered
   */
  protected EList<DependencyPort> outputPorts;

  /**
   * The default value of the '{@link #getWiki() <em>Wiki</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWiki()
   * @generated
   * @ordered
   */
  protected static final String WIKI_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getWiki() <em>Wiki</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWiki()
   * @generated
   * @ordered
   */
  protected String wiki = WIKI_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DependencyComponentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DependencyPackage.Literals.DEPENDENCY_COMPONENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DependencyPackage.DEPENDENCY_COMPONENT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<DependencyPort> getInputPorts()
  {
    if (inputPorts == null)
    {
      inputPorts = new EObjectContainmentEList<DependencyPort>(DependencyPort.class, this, DependencyPackage.DEPENDENCY_COMPONENT__INPUT_PORTS);
    }
    return inputPorts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<DependencyPort> getOutputPorts()
  {
    if (outputPorts == null)
    {
      outputPorts = new EObjectContainmentEList<DependencyPort>(DependencyPort.class, this, DependencyPackage.DEPENDENCY_COMPONENT__OUTPUT_PORTS);
    }
    return outputPorts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getWiki()
  {
    return wiki;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWiki(String newWiki)
  {
    String oldWiki = wiki;
    wiki = newWiki;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DependencyPackage.DEPENDENCY_COMPONENT__WIKI, oldWiki, wiki));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DependencyPackage.DEPENDENCY_COMPONENT__INPUT_PORTS:
        return ((InternalEList<?>)getInputPorts()).basicRemove(otherEnd, msgs);
      case DependencyPackage.DEPENDENCY_COMPONENT__OUTPUT_PORTS:
        return ((InternalEList<?>)getOutputPorts()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DependencyPackage.DEPENDENCY_COMPONENT__NAME:
        return getName();
      case DependencyPackage.DEPENDENCY_COMPONENT__INPUT_PORTS:
        return getInputPorts();
      case DependencyPackage.DEPENDENCY_COMPONENT__OUTPUT_PORTS:
        return getOutputPorts();
      case DependencyPackage.DEPENDENCY_COMPONENT__WIKI:
        return getWiki();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DependencyPackage.DEPENDENCY_COMPONENT__NAME:
        setName((String)newValue);
        return;
      case DependencyPackage.DEPENDENCY_COMPONENT__INPUT_PORTS:
        getInputPorts().clear();
        getInputPorts().addAll((Collection<? extends DependencyPort>)newValue);
        return;
      case DependencyPackage.DEPENDENCY_COMPONENT__OUTPUT_PORTS:
        getOutputPorts().clear();
        getOutputPorts().addAll((Collection<? extends DependencyPort>)newValue);
        return;
      case DependencyPackage.DEPENDENCY_COMPONENT__WIKI:
        setWiki((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DependencyPackage.DEPENDENCY_COMPONENT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case DependencyPackage.DEPENDENCY_COMPONENT__INPUT_PORTS:
        getInputPorts().clear();
        return;
      case DependencyPackage.DEPENDENCY_COMPONENT__OUTPUT_PORTS:
        getOutputPorts().clear();
        return;
      case DependencyPackage.DEPENDENCY_COMPONENT__WIKI:
        setWiki(WIKI_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DependencyPackage.DEPENDENCY_COMPONENT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case DependencyPackage.DEPENDENCY_COMPONENT__INPUT_PORTS:
        return inputPorts != null && !inputPorts.isEmpty();
      case DependencyPackage.DEPENDENCY_COMPONENT__OUTPUT_PORTS:
        return outputPorts != null && !outputPorts.isEmpty();
      case DependencyPackage.DEPENDENCY_COMPONENT__WIKI:
        return WIKI_EDEFAULT == null ? wiki != null : !WIKI_EDEFAULT.equals(wiki);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", wiki: ");
    result.append(wiki);
    result.append(')');
    return result.toString();
  }

} //DependencyComponentImpl
