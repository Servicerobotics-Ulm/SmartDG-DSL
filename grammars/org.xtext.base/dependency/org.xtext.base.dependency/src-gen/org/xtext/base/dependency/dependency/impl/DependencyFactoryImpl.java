/**
 * generated by Xtext 2.21.0
 */
package org.xtext.base.dependency.dependency.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.base.dependency.dependency.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DependencyFactoryImpl extends EFactoryImpl implements DependencyFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static DependencyFactory init()
  {
    try
    {
      DependencyFactory theDependencyFactory = (DependencyFactory)EPackage.Registry.INSTANCE.getEFactory(DependencyPackage.eNS_URI);
      if (theDependencyFactory != null)
      {
        return theDependencyFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new DependencyFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DependencyFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case DependencyPackage.MODEL: return createModel();
      case DependencyPackage.NEW: return createNew();
      case DependencyPackage.AT: return createAt();
      case DependencyPackage.USER_NAME: return createUserName();
      case DependencyPackage.USER_IMPORT: return createUserImport();
      case DependencyPackage.ENVIRONMENT: return createEnvironment();
      case DependencyPackage.DEPENDENCY_OBJECT: return createDependencyObject();
      case DependencyPackage.DEPENDENCY_COMPONENT: return createDependencyComponent();
      case DependencyPackage.DEPENDENCY_PORT: return createDependencyPort();
      case DependencyPackage.DEPENDENCY_CONNECTORS: return createDependencyConnectors();
      case DependencyPackage.SYSTEM_PROJECT: return createSystemProject();
      case DependencyPackage.DEPENDENCY: return createDependency();
      case DependencyPackage.GUI: return createGUI();
      case DependencyPackage.CIM: return createCIM();
      case DependencyPackage.BOX_LOCATION: return createBoxLocation();
      case DependencyPackage.COMPONENT_DEVELOPMENT: return createComponentDevelopment();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public New createNew()
  {
    NewImpl new_ = new NewImpl();
    return new_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public At createAt()
  {
    AtImpl at = new AtImpl();
    return at;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UserName createUserName()
  {
    UserNameImpl userName = new UserNameImpl();
    return userName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UserImport createUserImport()
  {
    UserImportImpl userImport = new UserImportImpl();
    return userImport;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Environment createEnvironment()
  {
    EnvironmentImpl environment = new EnvironmentImpl();
    return environment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DependencyObject createDependencyObject()
  {
    DependencyObjectImpl dependencyObject = new DependencyObjectImpl();
    return dependencyObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DependencyComponent createDependencyComponent()
  {
    DependencyComponentImpl dependencyComponent = new DependencyComponentImpl();
    return dependencyComponent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DependencyPort createDependencyPort()
  {
    DependencyPortImpl dependencyPort = new DependencyPortImpl();
    return dependencyPort;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DependencyConnectors createDependencyConnectors()
  {
    DependencyConnectorsImpl dependencyConnectors = new DependencyConnectorsImpl();
    return dependencyConnectors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SystemProject createSystemProject()
  {
    SystemProjectImpl systemProject = new SystemProjectImpl();
    return systemProject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Dependency createDependency()
  {
    DependencyImpl dependency = new DependencyImpl();
    return dependency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GUI createGUI()
  {
    GUIImpl gui = new GUIImpl();
    return gui;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CIM createCIM()
  {
    CIMImpl cim = new CIMImpl();
    return cim;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BoxLocation createBoxLocation()
  {
    BoxLocationImpl boxLocation = new BoxLocationImpl();
    return boxLocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComponentDevelopment createComponentDevelopment()
  {
    ComponentDevelopmentImpl componentDevelopment = new ComponentDevelopmentImpl();
    return componentDevelopment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DependencyPackage getDependencyPackage()
  {
    return (DependencyPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static DependencyPackage getPackage()
  {
    return DependencyPackage.eINSTANCE;
  }

} //DependencyFactoryImpl
